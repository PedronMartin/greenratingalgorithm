# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Main
                                 A QGIS plugin
 Scheletro di prova per il plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-14
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Martin Pedron
        email                : pedronmartin64@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsApplication
import os.path

# Import the code for the dialog
from .GreenRatingAlgorithm_dialog import MainDialog

# Import the processing provider
from .Algorithm.provider import GreenRatingProvider


class Main:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor."""
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Main_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&Green Rating Calculation 3-30-300')
        self.first_start = None

        self.provider = None

    def initProcessing(self):
        self.provider = GreenRatingProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def unloadProcessing(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)

    def tr(self, message):
        return QCoreApplication.translate('Main', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)
        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)
        self.actions.append(action)
        return action

    def initGui(self):
        self.initProcessing()
        icon_path = ':/plugins/GreenRatingAlgorithm/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.first_start = True

    def unload(self):
        self.unloadProcessing()
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Green Rating Calculation 3-30-300'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start == True:
            self.first_start = False
            self.dlg = MainDialog()
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            pass
